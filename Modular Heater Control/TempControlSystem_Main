/* ******************************************************************************
tempController.ino : This function is the setup & loop of the Temp Control System. 
1st, It calls files from DisplayFunctions.ino, HeaterControl.ino, and SetTemp.
2nd, prompts the user to adjust the set point of the temperature controller. 
3rd, uses a PID control system to reach and maintain the set temperature in the output.
If the maxTemp is exceeded, the screen locks out with a warning and the output 
    is locked to off position, with the PID blocked off.  To recover from an 
    overTempAlarm state, the user must reset the controller.
Future functionality: 
      (1) Improve PID using AutoTune
******************************************************************************** */
#include <PID_v1.h>
#include <LiquidCrystal.h>
LiquidCrystal lcd(8, 9, 4, 5, 6, 7);
// Define pins
int readTempPin = A5; //Analog input from pin A5
int heaterPin = 2; //Digital output to pin D3, a PWM pin
    // Define pins LEDs that tell the user what section of the reflow we are in
    int rampPin = 2;
    int soakPin = 3;
    int reflowPin = 4;
    int coolingPin = 5;

// Define Global Variables
double T0 = 0; // The temp of the oven at the start of the reflow
double startTime = 0; // The time elapsed between restarting the Arduino and starting the reflow PID
double runTime = 0; // How long the PID has been running
double desiredTemp = 0; // The corner of the reflow curve that we are trying to reach
double desiredTime = 0;
    double desiredTemp1 = 0;
    double desiredTemp2 = 0;
    double desiredTemp3 = 0;
    double desiredTime1 = 0;
    double desiredTime2 = 0;
    double desiredTime3 = 0;
double currentTemp = 0; //analog input converted to degrees 
double setTemp = 0; // The desired temperature of the oven, determined by linear interpolation between desiredTemps

// Define safety feature variables
double maxTemp = 270; // Max allowed temp. Signal alarm if temp ever exceeds this.
double minTemp = 25; // Room temperature
boolean desiredTempSet = false; // Have the desired temps and times been set yet?
boolean OverTempAlarm = false; // Has the temperature exceeded maxTemp?
boolean OverTimeAlarm = false; // Has the heater been on for too long?
boolean ReflowComplete = false; // Is the reflow cycle done?

// Specify PID parameters and variables
double kp = 2; //(proportional gain - difference between the current temperature and the set point)
double ki = 0.1; //(integral gain - proportional to the magnitude and duration of error)
double kd = 5; //(derivative gain - slope of the error over time)
double Output;
int WindowSize = 500; //ms
unsigned long windowStartTime;
PID myPID(&currentTemp, &Output, &setTemp,kp,ki,kd,DIRECT);
int MaxRelayFrequency = 20; //  The maximum frequency at which we want to tell our SSR to oscillate (in ms).
int MaxOutput = (1000-WindowSize*MaxRelayFrequency)/MaxRelayFrequency; /* This is the maximum output (in ms) that 
                                                                          we can have given our window size without
                                                                          exceeding MaxRelayFrequency. */

void setup()
{
  Serial.begin(9600);
  lcd.begin(16,2);
  // Define pin modes
    pinMode(readTempPin, INPUT);
    pinMode(heaterPin, OUTPUT);
    pinMode(rampPin,OUTPUT);
    pinMode(soakPin,OUTPUT);
    pinMode(reflowPin,OUTPUT);
    pinMode(coolingPin,OUTPUT);
  // Define PID stuff
    windowStartTime = millis();
    myPID.SetOutputLimits(0, MaxOutput); /* The range ouf Output times (in ms). 0 corresponds to oven always being off;
                                            MaxOutput correlates to the PID being driven at maximum intensity.*/
    myPID.SetMode(AUTOMATIC);
}

void loop()
{
  if(!OverTempAlarm){ // As long as we are not overheated...
    if(!OverTimeAlarm){ // As long as we have not been on for too long....
      // Now set the desired temps and times if you haven't already.  This should only be done once per reset.  
       while(!desiredTempSet){ 
          display_instructions();
          lcd.clear();lcd.print("Set Temp 1"); delay(800);
          desiredTemp1 = setDesiredTemp();
          lcd.clear();lcd.print("Set Time 1"); delay(800);
          desiredTime1 = setDesiredTime();
          lcd.clear();lcd.print("Set Temp 2"); delay(800);
          desiredTemp2 = setDesiredTemp();
          lcd.clear();lcd.print("Set Time 2"); delay(800);
          desiredTime2 = setDesiredTime();
          lcd.clear();lcd.print("Set Temp 3"); delay(800);
          desiredTemp3 = setDesiredTemp();
          lcd.clear();lcd.print("Set Time 3"); delay(800);
          desiredTime3 = setDesiredTime();
          desiredTempSet = true; // The user has set all their desired values.  We don't need to run these commands again.
          
          double val0 = analogRead(readTempPin); //reading from thermocouple pin at start of reflow
          double volt0 = (val0/1023)*5; //map that reading to a voltage 
          T0=volt0/(0.005); // Temperature at the start of the reflow 
          startTime= millis();  // The time elapsed between restarting the Arduino and starting the reflow
        }
      if(!ReflowComplete){ // As long as we aren't already in the cooling phase....
          runTime = (millis()-startTime)*1000; // Determine how long the PID has been running. In seconds.
          determineReflowSection();  // Determine if we are in ramp, soak, reflow, or cooling
          PIDHeaterControl(); //Monitor & control the temp
      }
      else if(ReflowComplete){
        lcd.clear();
        lcd.print("Cooling");
        lcd.setCursor(0,1);
        lcd.print("Temp: ");lcd.print(currentTemp);lcd.print((char)223);lcd.print("C");
      }
    }
  }
}
