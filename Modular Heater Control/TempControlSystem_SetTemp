/* ****************************************************************************************************************
This file contains the user interaction functions.  These allow the user to set their desired temperature and desired time. 
If the user selects a temp that is maxTemp or below minTemp, or a time that is negative, they will be warned and asked to reinput.
 > read_LCD_buttons()                     <---This method reads the button voltages and determines which button is being pressed.
 > userAdjust(double thingToAdjust, boolean 1forTemp,0forTime , int setpoint1,2,or3)    
                                          <---This method inputs, adjusts, and then   outputs thingToAdjust, which can be a timeor a temp.
                                              Also inputs a boolean called tempOrTime, which is true if we are using a temp and false if using a time.
 > setDesiredTemp(int setpoint1,2,or3)    <--- This method makes a varilabe timpToSet, asks the user to adjust it, and then outputs that tempToSet.
 > setDesiredTime(int setpoint1,2,or3)    <--- This method makes a variable timeToSet, asks the user to adjust it, and then outputs that timeToSet.
 > checkUserInterrupt(): if the user presseses select during heating, heating will shut off and Arduino will lock up
***************************************************************************************************************** */

boolean userFinished = false; // Is the user done setting the temp?

// define some values used by the panel and buttons
int lcd_key = 0;
int adc_key_in = 0;
#define btnRIGHT 0
#define btnUP 1
#define btnDOWN 2
#define btnLEFT 3
#define btnSELECT 4
#define btnNONE 5
#define V1 (0+50)
#define V2 (50+99)
#define V3 (50+255)
#define V4 (50+409)
#define V5 (50+639)
#define VNONE (50+1023)


/*******************************************************************************************
This method reads the button voltages and determines which button is being pressed
*******************************************************************************************/
int read_LCD_buttons()
{
  adc_key_in = analogRead(0); // read the value from the sensor
  // my buttons when read are centered at these valies: 0, 144, 329, 504, 741
  // we add approx 50 to those values and check to see if we are close
  if (adc_key_in > VNONE) return btnNONE; // We make this the 1st option for speed reasons since it will be the most likely result
  if (adc_key_in < V1) return btnRIGHT;
  if (adc_key_in < V2) return btnUP;
  if (adc_key_in < V3) return btnDOWN;
  if (adc_key_in < V4) return btnLEFT;
  if (adc_key_in < V5) return btnSELECT;
  return btnNONE; // when all others fail, return this...
}


/*******************************************************************************************
This method inputs, adjusts, and then outputs thingToAdjust, which can be a time or a temp.
Also inputs a boolean called tempOrTime, which is true if we are using a temp and false if using a time.
*******************************************************************************************/
double userAdjust(double thingToAdjust, boolean tempOrTime, int pointN){ 
  lcd_key = read_LCD_buttons(); // read the buttons
  switch (lcd_key) // depending on which button was pushed, we perform an action
  {
    case btnRIGHT:
    {
      thingToAdjust= thingToAdjust+50;
      display_thingUserSelected(thingToAdjust, tempOrTime, pointN);
      return thingToAdjust;
    }
    case btnLEFT:
    {
      thingToAdjust = thingToAdjust-50;
      display_thingUserSelected(thingToAdjust,tempOrTime,pointN);
      return thingToAdjust;
    }
    case btnUP:
    {
      thingToAdjust= thingToAdjust+1;
      display_thingUserSelected(thingToAdjust,tempOrTime,pointN);
      return thingToAdjust;
    }
    case btnDOWN:
    {
      thingToAdjust = thingToAdjust-1;
      display_thingUserSelected(thingToAdjust,tempOrTime,pointN);
      return thingToAdjust;
    }
    case btnSELECT:
    {
      userFinished = true;
      delay(300);
      return thingToAdjust;
    }
    case btnNONE:
    {
      display_thingUserSelected(thingToAdjust,tempOrTime,pointN);
      return thingToAdjust;
    }
  }
  return thingToAdjust;
}


/*******************************************************************************************
This method makes a variable tempToSet, asks the user to adjust it, and then outputs that 
tempToSet.  It does not let the user select temps that are too hot or too cold.
*******************************************************************************************/
double setDesiredTemp(int pointNum) // pointNum is the desired point we are working on (1, 2, or 3)
{
  double tempToSet = 0.00;
  userFinished = false;
  while(userFinished == false){
    tempToSet = userAdjust(tempToSet, true, pointNum); // the "true" input tells userAdjust that this is a TEMP.
  }
  userFinished = false;
  while(tempToSet>maxTemp || tempToSet<minTemp){ // Safety Check to make sure the user isn't selecting a temp that is too high or too low
        lcd.clear();
        lcd.print("Invalid Temp!"); delay(2000);
        lcd.clear();
        lcd.print("Max is ");lcd.print(maxTemp);lcd.print((char)223);lcd.print("C");
        lcd.setCursor(0,1);
        lcd.print("Min is ");lcd.print(minTemp);lcd.print((char)223);lcd.print("C");
        delay(2000);
        lcd.clear();
        lcd.print("Select New Temp:"); delay(1500);
        while(userFinished == false){
          tempToSet = userAdjust(tempToSet, true,pointNum); // the "true" input tells userAdjust that this is a TEMP.
        }
        userFinished = false;
  }
  return tempToSet;
}


/*******************************************************************************************
This method makes a variable timeToSet, asks the user to adjust it, and then outputs that timeToSet.
*******************************************************************************************/
double setDesiredTime(int pointNumt) // pointNum is the desired point we are working on (1, 2, or 3)
{
  double timeToSet = 0;
  userFinished = false;
  while(userFinished == false){
   timeToSet= userAdjust(timeToSet, false,pointNumt); // the "false" input tells userAdjust that this is a TIME.
  }
  userFinished = false;
  while(timeToSet < 0){
    lcd.clear();lcd.print("No time < 0.");
    lcd.setCursor(0,1);lcd.print("Reset time.");
    while(userFinished == false){
       timeToSet = userAdjust(timeToSet, false,pointNumt); // the "false" input tells userAdjust that this is a TIME.
    } 
    userFinished = false;
  }
  return timeToSet;
}

/*******************************************************************************************
This method checks if the user presses select at any time during heating.  If the user presses
select, stop heating and require a hard reset.
*******************************************************************************************/
boolean checkUserInterrupt(){
  if(read_LCD_buttons() == btnSELECT){
    ReflowComplete = true;
    return true;
  }else return false; 
}
