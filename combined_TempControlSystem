/* *****************************************************************
This function prompts the user to adjust the set point of the 
temperature controller. It allows the user to increment or decrement
the temperature. It also tests the set point as part of a sanity check 
to see if the user set point is within a reasonable range 
(i.e. not unreasonable high and not below room temperature).
******************************************************************** */
#include <PID_v1.h>
#include <LiquidCrystal.h>
LiquidCrystal lcd(8, 9, 4, 5, 6, 7);

// Define Variables
int tempread = A5; // analog output from pin A1 
double currentTemp = 0; //analog input converted to degrees 
double setTemp = 0; //user input 
int maxTemp = 270; //user input
int minTemp = 25; //user input 
int heaterPin = 2; //digital output to pin D7
double Output;
boolean userFinished = false;
boolean desiredTempSet = false;

// Specify PID parameters
double kp = 2; //(proportional gain - difference between the current temperature and the set point)
double ki = 0.1; //(integral gain - proportional to the magnitude and duration of error)
double kd = 5; //(derivative gain - slope of the error over time)
PID myPID(&currentTemp, &Output, &setTemp,kp,ki,kd,DIRECT);
int WindowSize = 5000;
unsigned long windowStartTime;


// define some values used by the panel and buttons
int lcd_key = 0;
int adc_key_in = 0;
#define btnRIGHT 0
#define btnUP 1
#define btnDOWN 2
#define btnLEFT 3
#define btnSELECT 4
#define btnNONE 5
#define V1 (0+50)
#define V2 (50+99)
#define V3 (50+255)
#define V4 (50+409)
#define V5 (50+639)
#define VNONE (50+1023)

void setup()
{
  Serial.begin(9600);
  lcd.begin(16,2);
  pinMode(tempread, INPUT);
  pinMode(heaterPin, OUTPUT);
}

void loop()
{
  while(desiredTempSet == false){
    setDesiredTemp();
    windowStartTime = millis();
    myPID.SetOutputLimits(0,WindowSize);
    myPID.SetMode(AUTOMATIC);
  }
  PIDHeaterControl();
  delay(500);
}

// read the buttons
int read_LCD_buttons()
{
  adc_key_in = analogRead(0); // read the value from the sensor
  // my buttons when read are centered at these valies: 0, 144, 329, 504, 741
  // we add approx 50 to those values and check to see if we are close
  if (adc_key_in > VNONE) return btnNONE; // We make this the 1st option for speed reasons since it will be the most likely result
  if (adc_key_in < V1) return btnRIGHT;
  if (adc_key_in < V2) return btnUP;
  if (adc_key_in < V3) return btnDOWN;
  if (adc_key_in < V4) return btnLEFT;
  if (adc_key_in < V5) return btnSELECT;
  return btnNONE; // when all others fail, return this...
}

void display_instructions()
{
  lcd.clear();
  lcd.print("Set desired temp:");
  delay(2000);
  lcd.clear();
  lcd.print("Up/Down by 1"); lcd.print((char)223);lcd.print("C");
  lcd.setCursor(0,1);
  lcd.print("Lft/Rgt by 50");lcd.print((char)223);lcd.print("C");
  delay(2000);
  lcd.clear();
  lcd.print("Press Select");
  lcd.setCursor(0,1);
  lcd.print("when finished.");
  delay(2000);
}

void display_setTemp()
{
  lcd.clear();
  lcd.print("Set Temp: ");
  lcd.print(setTemp);lcd.print((char)223);lcd.print("C");
  delay(300);
}

void display_currentTemp() 
{
  lcd.clear();  // Clear the LCD
  
  // Display current temperature.
  lcd.print("CurrentTemp:");   
  lcd.print(currentTemp);
  lcd.print( (char)223);
  lcd.print("C");
  
  // Display the set point temperature which the controller is trying to reach.
  lcd.setCursor(0,1);          
  lcd.print("Set Temp:");
  lcd.print(setTemp);  
  lcd.print( (char)223);
  lcd.print("C");
  delay(1000);
}

void userAdjustTemp(){
  lcd_key = read_LCD_buttons(); // read the buttons
  switch (lcd_key) // depending on which button was pushed, we perform an action
  {
    case btnRIGHT:
    {
      setTemp = setTemp-50;
      display_setTemp();
      break;
    }
    case btnLEFT:
    {
      setTemp = setTemp+50;
      display_setTemp();
      break;
    }
    case btnUP:
    {
      setTemp = setTemp+1;
      display_setTemp();
      break;
    }
    case btnDOWN:
    {
      setTemp = setTemp-1;
      display_setTemp();
      break;
    }
    case btnSELECT:
    {
      userFinished = true;
      break;
    }
    case btnNONE:
    {
      display_setTemp();
      break;
    }
  }
}


void setDesiredTemp()
{
  userFinished = false;
  display_instructions();
  while(userFinished == false){
    userAdjustTemp();
  }
  userFinished = false;
  while(setTemp>maxTemp || setTemp<minTemp){
        lcd.clear();
        lcd.print("Invalid Temp!"); delay(2000);
        lcd.clear();
        lcd.print("Max is ");lcd.print(maxTemp);lcd.print((char)223);lcd.print("C");
        lcd.setCursor(0,1);
        lcd.print("Min is ");lcd.print(minTemp);lcd.print((char)223);lcd.print("C");
        delay(2000);
        lcd.clear();
        lcd.print("Select New Temp:"); delay(1500);
        while(userFinished == false){
          userAdjustTemp();
        }
        userFinished = false;
  }
  lcd.clear();
  lcd.print("Temp Set.");
  lcd.setCursor(0,1);
  lcd.print("Desired = ");
  lcd.print(setTemp);lcd.print((char)223);lcd.print("C");
  delay(2000);
  desiredTempSet = true;
}

void PIDHeaterControl(){
  
  currentTemp = analogRead(tempread)/5;
  display_currentTemp();
  myPID.Compute();
  unsigned long now = millis();
  if(now - windowStartTime > WindowSize)
  {
    windowStartTime += WindowSize;
  }
  if(Output > now-windowStartTime) digitalWrite(heaterPin, HIGH);
  else digitalWrite(heaterPin, LOW);
}


void controlHeaterCircuit()
{
  //convert to degrees 
  // thermocouple gives output in mV; gain is 5 mV/degree C
  currentTemp = analogRead(tempread)/5;
  
  display_currentTemp();
  while(currentTemp<setTemp)
  {
    Serial.println("heater on");
    //turn heater on when temp is too low
    digitalWrite(heaterPin,HIGH); 
    currentTemp=analogRead(tempread)/5;
    
    if(currentTemp>=maxTemp){
      lcd.print("WARNING: OVER TEMP.");
      lcd.setCursor(0,1);
      lcd.print("DISCONNECT POWER");
    }
  }
  if(currentTemp>=setTemp){
    digitalWrite(heaterPin,LOW);
  }
}

