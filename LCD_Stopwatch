#include <LiquidCrystal.h>
/*******************************************************
This program will test the LCD panel and the buttons
Original Template: Mark Bramwell, July 2010
Edited by: Inka Johnson, Marina Goll, Jackson Morton April 2013
********************************************************/
// select the pins used on the LCD panel

LiquidCrystal lcd(8, 9, 4, 5, 6, 7);

// define some values used by the panel and buttons
int lcd_key = 0;
int adc_key_in = 0;
#define btnRIGHT 0
#define btnUP 1
#define btnDOWN 2
#define btnLEFT 3
#define btnSELECT 4
#define btnNONE 5
#define V1 (0+50)
#define V2 (50+99)
#define V3 (50+255)
#define V4 (50+409)
#define V5 (50+639)
#define VNONE (50+1023)

// Define time
int minute = 0;
int second = 0;
int time = 0;
long previousMillis = 0;
long oneSecond = 1000;

// Define start/stop status
boolean lastButton = LOW;
boolean currentButton = LOW;
int numSELECTpresses = 0;

// Define variables used in debounce code
int buttonBounceState;
int lastButtonBounceState = 1023;
long lastDebounceTime = 0;
long debounceDelay = 200;
int reading;

// read the buttons
int read_LCD_buttons()
{
  adc_key_in = analogRead(0); // read the value from the sensor
  buttonBounceState = lastButtonBounceState;
  // if the switch changed, due to either noise or pressing:
  if( adc_key_in != lastButtonBounceState){
    //reset the debouncing timer
    lastDebounceTime = millis();
  }
  if ((millis() - lastDebounceTime) > debounceDelay){
    //whatever the reading is at, its been there for longer than the debounce
    //delay, so take it as the actual current state:
    buttonBounceState = adc_key_in;
  }
  
  lastButtonBounceState = adc_key_in;
  // my buttons when read are centered at these values: 0, 144, 329, 504, 741
  // we add approx 50 to those values and check to see if we are close
  if (buttonBounceState > VNONE) return btnNONE; // We make this the 1st option for speed reasons since it will be the most likely result
  if (buttonBounceState < V1) return btnRIGHT;
  if (buttonBounceState < V2) return btnUP;
  if (buttonBounceState < V3) return btnDOWN;
  if (buttonBounceState < V4) return btnLEFT;
  if (buttonBounceState < V5) return btnSELECT;
 
  return btnNONE; // when all others fail, return this...
}

//// Count down the time
//void countDown(int time)
//{
//    for (int secondsLeft=time; secondsLeft==0 ; secondsLeft--){
//        minute = secondsLeft / 60; 
//        second = secondsLeft % 60; // modulus : the remainder after devision
//        minute = minute - (second/60);
//        lcd.print(minute);
//        lcd.print(":");
//        lcd.print(second);
//        delay(1000);
//      }
//}

void setup()
{
  lcd.begin(16, 2); // start the library
  lcd.clear();
  Serial.begin(9600);
}
void loop()
{
  lcd_key = read_LCD_buttons(); // read the buttons
  switch (lcd_key) // depending on which button was pushed, we perform an action
  {
    case btnRIGHT:
    {
      second = second+1;
      lcd.print(minute);
      lcd.print(":");
      lcd.print(second);
      break;
    }
    case btnLEFT:
    {
      second = second -1;
      lcd.print(minute);
      lcd.print(":");
      lcd.print(second);
      break;
    }
    case btnUP:
    {
      minute = minute+1;
      lcd.print(minute);
      lcd.print(":");
      lcd.print(second);
      break;
    }
    case btnDOWN:
    {
      minute = minute-1;
      lcd.print(minute);
      lcd.print(":");
      lcd.print(second);
      break;
    }
    case btnSELECT:
    {
      // Initialize variables used to monitor whether or not the user has pressed the select button
      int buttonStatus1 = 0;
      int buttonStatus2 = 0;
      int buttonStatus3 = 0;
      int buttonStatus4 = 0;
      int buttonStatus5 = 0;
      
      numSELECTpresses++;
      Serial.print("numSELECTpresses: ");
      Serial.println(numSELECTpresses);
      
      //Start Countdown
      time = (60*minute) + second;
      unsigned long currentMillis = millis();
      Serial.print("currentMillis: "); Serial.println(currentMillis);
      Serial.print("previousMillis: "); Serial.println(previousMillis);
      
      while(time >= 0 && (numSELECTpresses%2)!=0){ // this is an "odd" press of select --> I want to START time
       Serial.println("Yay! Entered while loop");
       buttonStatus2 = read_LCD_buttons();
       Serial.print("Button Status 2: ");
       Serial.println(buttonStatus2);
       Serial.print("numSELECTpresses: ");
      Serial.println(numSELECTpresses);
       if((currentMillis - previousMillis) >= oneSecond){
            previousMillis = currentMillis;
            Serial.print("previousMillis, after entering if statement: "); Serial.println(previousMillis);
            minute = time/60;
            second = time%60;
            buttonStatus3 = read_LCD_buttons();
             Serial.print("Button Status 3: ");
             Serial.println(buttonStatus3);
             Serial.print("numSELECTpresses: ");
      Serial.println(numSELECTpresses);
            lcd.clear();
            lcd.print(minute);
            lcd.print(":");
            lcd.print(second);
            buttonStatus4 = read_LCD_buttons();
             Serial.print("Button Status 4: ");
       Serial.println(buttonStatus4);
       Serial.print("numSELECTpresses: ");
      Serial.println(numSELECTpresses);
            time--;
            Serial.println("I just took time off the clock.");
        }
        buttonStatus5 = read_LCD_buttons();
         Serial.print("Button Status 5: ");
       Serial.println(buttonStatus5);
       Serial.print("numSELECTpresses: ");
      Serial.println(numSELECTpresses);
        if(( buttonStatus2==btnSELECT || buttonStatus3==btnSELECT || buttonStatus4==btnSELECT || buttonStatus5==btnSELECT)){
          numSELECTpresses++; //this is an "even" press of select
          Serial.println("Someone pressed select again!");
        }
        currentMillis = millis();
        Serial.print("currentMillis, after printing & checking button status: "); Serial.println(previousMillis);
      }
      
      if(time==0){
        Serial.println("Im going to break out of the select case.");
        break;
      }
      
    }
    
    case btnNONE:
    {
      lcd.print(minute);
      lcd.print(":");
      lcd.print(second);
      break;
    }
  }
  delay(200);
  lcd.clear();
}
